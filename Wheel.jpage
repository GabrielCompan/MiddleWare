import java.util.*;

public class Wheel extends CarPart {
	private int diameter=0;

	public Wheel(int diameter) {
		this.diameter = diameter;
	}
	
	public getDiameter() {
		return diameter;
	}
}

public class Car extends CarPart{
	private char color;
	private int makeYear;
	private List<Wheel>wheels = new ArrayList<>();
	
	public Car(int wheelsCount, int wheelDiameter, int makeYear, char color) {
		
		this.makeYear = makeYear;
		this.color = color;
		for (int i =0; i<wheelsCount; i++) {
			wheels.add(new Wheel(wheelDiameter));
		}
	}
}

public List<Transaction> findAllTransactionsIn2011AndSortByValueAsc(){
    List<Transaction> newList = transactions.stream()
              .filter(x->x.getYear() == 2011)
              .sorted(Comparator.comparing(Transaction::getValue))
              .collect(Collectors.toList());
    return newList;
}

public getUniqueCitiesSortedAsc() {
	List<City> list = Arrays.asList("Paris","Munich", "London", "Roma", "Tokyo");
	return City;
}

public getSingleStringFromUniqueTradersNamesSortByNameAsc() {
    public static void main(String[] args) {   
        List<Traders> names = Arrays.asList("Lily Evans", "Severus Rogue", "Sirius Black", "Remus Lupin", "Minerva McGonagall");     
        Optional<String> newString = javaTpointStudents.stream().reduce((firstName, secondName));
        newString.ifPresent(System.out::println);
    }   
}

public isSomeTraderFromCity() {
	boolean isSome = false;
	
	List<String> newList = new ArrayList<String>();
        for (int i=0; i<transactions.size(); i++) {
            if (!newList.contains(transactions.get(i).getTrader().getCity())) {
                newList.add(transactions.get(i).getTrader().getCity());
            }
        }
        isSome = newList.stream().anyMatch(str -> str == cityName);
	
        return isSome;
}

